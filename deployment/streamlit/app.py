#!/usr/bin/env python3
"""
Interface utilisateur Streamlit pour le syst√®me de recommandation de films
Auteur: Dady Akrou Cyrille
Email: cyrilledady0501@gmail.com
"""

import streamlit as st
import pandas as pd
import numpy as np
import requests
import json
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
from typing import Dict, List, Optional, Any
import yaml
from pathlib import Path
import sys

# Configuration de la page
st.set_page_config(
    page_title="Syst√®me de Recommandation de Films",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS personnalis√©s
st.markdown("""
<style>
.main-header {
    font-size: 3rem;
    color: #1f77b4;
    text-align: center;
    margin-bottom: 2rem;
}
.metric-card {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #1f77b4;
}
.recommendation-card {
    background-color: #ffffff;
    padding: 1rem;
    border-radius: 0.5rem;
    border: 1px solid #e0e0e0;
    margin-bottom: 0.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.error-message {
    background-color: #ffebee;
    color: #c62828;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #c62828;
}
.success-message {
    background-color: #e8f5e8;
    color: #2e7d32;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #2e7d32;
}
</style>
""", unsafe_allow_html=True)

# Configuration de l'API
API_BASE_URL = "http://localhost:8000"

# Cache pour les donn√©es
@st.cache_data(ttl=300)  # Cache pendant 5 minutes
def load_config():
    """Charge la configuration"""
    try:
        config_path = Path("../../config/config.yaml")
        if not config_path.exists():
            config_path = Path("config/config.yaml")
        
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as file:
                return yaml.safe_load(file)
    except Exception as e:
        st.error(f"Erreur lors du chargement de la configuration: {e}")
    
    return {}

@st.cache_data(ttl=300)
def get_api_health():
    """V√©rifie l'√©tat de sant√© de l'API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        return {"status": "error", "error": str(e)}
    
    return {"status": "unavailable"}

@st.cache_data(ttl=300)
def get_available_models():
    """R√©cup√®re la liste des mod√®les disponibles"""
    try:
        response = requests.get(f"{API_BASE_URL}/models", timeout=10)
        if response.status_code == 200:
            return response.json().get("available_models", [])
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des mod√®les: {e}")
    
    return []

def get_recommendations(user_id: int, model_type: str, n_recommendations: int = 10):
    """Obtient des recommandations pour un utilisateur"""
    try:
        payload = {
            "user_id": user_id,
            "n_recommendations": n_recommendations,
            "model_type": model_type,
            "exclude_seen": True
        }
        
        response = requests.post(
            f"{API_BASE_URL}/recommendations",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des recommandations: {e}")
        return None

def predict_rating(user_id: int, movie_id: int, model_type: str):
    """Pr√©dit la note qu'un utilisateur donnerait √† un film"""
    try:
        payload = {
            "user_id": user_id,
            "movie_id": movie_id,
            "model_type": model_type
        }
        
        response = requests.post(
            f"{API_BASE_URL}/predict",
            json=payload,
            timeout=15
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction: {e}")
        return None

def add_rating(user_id: int, movie_id: int, rating: float):
    """Ajoute un nouveau rating"""
    try:
        payload = {
            "user_id": user_id,
            "movie_id": movie_id,
            "rating": rating,
            "timestamp": int(datetime.now().timestamp())
        }
        
        response = requests.post(
            f"{API_BASE_URL}/ratings",
            json=payload,
            timeout=10
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Erreur API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        st.error(f"Erreur lors de l'ajout du rating: {e}")
        return None

def get_movie_info(movie_id: int):
    """R√©cup√®re les informations d'un film"""
    try:
        response = requests.get(f"{API_BASE_URL}/movies/{movie_id}", timeout=10)
        
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 404:
            return None
        else:
            st.error(f"Erreur API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration du film: {e}")
        return None

def get_user_profile(user_id: int):
    """R√©cup√®re le profil d'un utilisateur"""
    try:
        response = requests.get(f"{API_BASE_URL}/users/{user_id}/profile", timeout=10)
        
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 404:
            return None
        else:
            st.error(f"Erreur API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration du profil: {e}")
        return None

def get_metrics():
    """R√©cup√®re les m√©triques de performance"""
    try:
        response = requests.get(f"{API_BASE_URL}/metrics", timeout=10)
        
        if response.status_code == 200:
            return response.json()
        else:
            return None
            
    except Exception as e:
        return None

def main():
    """Fonction principale de l'application Streamlit"""
    
    # En-t√™te principal
    st.markdown('<h1 class="main-header">üé¨ Syst√®me de Recommandation de Films</h1>', unsafe_allow_html=True)
    st.markdown("---")
    
    # Sidebar pour la navigation
    st.sidebar.title("Navigation")
    page = st.sidebar.selectbox(
        "Choisir une page",
        ["üè† Accueil", "üéØ Recommandations", "üîÆ Pr√©dictions", "‚≠ê Ajouter un Rating", 
         "üë§ Profil Utilisateur", "üìä M√©triques", "‚ÑπÔ∏è √Ä propos"]
    )
    
    # V√©rification de l'√©tat de l'API
    health = get_api_health()
    if health.get("status") == "healthy":
        st.sidebar.success("‚úÖ API connect√©e")
    elif health.get("status") == "degraded":
        st.sidebar.warning("‚ö†Ô∏è API en mode d√©grad√©")
    else:
        st.sidebar.error("‚ùå API non disponible")
        st.error("L'API n'est pas disponible. Veuillez v√©rifier que le serveur est d√©marr√©.")
        return
    
    # Affichage des pages
    if page == "üè† Accueil":
        show_home_page(health)
    elif page == "üéØ Recommandations":
        show_recommendations_page()
    elif page == "üîÆ Pr√©dictions":
        show_predictions_page()
    elif page == "‚≠ê Ajouter un Rating":
        show_add_rating_page()
    elif page == "üë§ Profil Utilisateur":
        show_user_profile_page()
    elif page == "üìä M√©triques":
        show_metrics_page()
    elif page == "‚ÑπÔ∏è √Ä propos":
        show_about_page()

def show_home_page(health: Dict[str, Any]):
    """Page d'accueil"""
    st.header("Bienvenue dans le Syst√®me de Recommandation de Films")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3>üéØ Recommandations</h3>
            <p>Obtenez des recommandations personnalis√©es bas√©es sur vos pr√©f√©rences</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h3>üîÆ Pr√©dictions</h3>
            <p>Pr√©disez la note que vous donneriez √† un film</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3>‚≠ê Ratings</h3>
            <p>Ajoutez vos propres √©valuations de films</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # √âtat du syst√®me
    st.subheader("√âtat du Syst√®me")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        status_color = "üü¢" if health.get("status") == "healthy" else "üü°" if health.get("status") == "degraded" else "üî¥"
        st.metric("Statut API", f"{status_color} {health.get('status', 'unknown').title()}")
    
    with col2:
        models_loaded = health.get("models_loaded", {})
        loaded_count = sum(1 for loaded in models_loaded.values() if loaded)
        st.metric("Mod√®les Charg√©s", f"{loaded_count}/{len(models_loaded)}")
    
    with col3:
        db_status = "‚úÖ Connect√©e" if health.get("database_connected") else "‚ùå D√©connect√©e"
        st.metric("Base de Donn√©es", db_status)
    
    with col4:
        uptime = health.get("uptime_seconds", 0)
        uptime_str = f"{uptime//3600:.0f}h {(uptime%3600)//60:.0f}m"
        st.metric("Uptime", uptime_str)
    
    # Mod√®les disponibles
    if models_loaded:
        st.subheader("Mod√®les Disponibles")
        
        for model_type, is_loaded in models_loaded.items():
            status_icon = "‚úÖ" if is_loaded else "‚ùå"
            st.write(f"{status_icon} **{model_type.title()}**: {'Charg√©' if is_loaded else 'Non disponible'}")

def show_recommendations_page():
    """Page des recommandations"""
    st.header("üéØ Recommandations Personnalis√©es")
    
    # Param√®tres de recommandation
    col1, col2, col3 = st.columns(3)
    
    with col1:
        user_id = st.number_input("ID Utilisateur", min_value=1, max_value=100000, value=1, step=1)
    
    with col2:
        available_models = get_available_models()
        if available_models:
            model_type = st.selectbox("Type de Mod√®le", available_models)
        else:
            st.error("Aucun mod√®le disponible")
            return
    
    with col3:
        n_recommendations = st.slider("Nombre de Recommandations", min_value=1, max_value=50, value=10)
    
    # Bouton pour obtenir les recommandations
    if st.button("Obtenir des Recommandations", type="primary"):
        with st.spinner("G√©n√©ration des recommandations..."):
            recommendations = get_recommendations(user_id, model_type, n_recommendations)
        
        if recommendations:
            st.success(f"Recommandations g√©n√©r√©es en {recommendations['execution_time_ms']:.1f}ms")
            
            # Affichage des recommandations
            st.subheader(f"Recommandations pour l'utilisateur {user_id}")
            
            for i, rec in enumerate(recommendations['recommendations'], 1):
                with st.container():
                    col1, col2, col3 = st.columns([1, 3, 1])
                    
                    with col1:
                        st.write(f"**#{i}**")
                    
                    with col2:
                        st.write(f"**{rec['title']}**")
                        if rec.get('genres'):
                            st.write(f"Genres: {', '.join(rec['genres'])}")
                        if rec.get('year'):
                            st.write(f"Ann√©e: {rec['year']}")
                    
                    with col3:
                        score = rec['recommendation_score']
                        st.metric("Score", f"{score:.2f}")
                    
                    st.markdown("---")
            
            # Informations sur la recommandation
            st.info(f"Mod√®le utilis√©: {recommendations['model_used']} | G√©n√©r√© le: {recommendations['timestamp']}")

def show_predictions_page():
    """Page des pr√©dictions"""
    st.header("üîÆ Pr√©diction de Notes")
    
    # Param√®tres de pr√©diction
    col1, col2, col3 = st.columns(3)
    
    with col1:
        user_id = st.number_input("ID Utilisateur", min_value=1, max_value=100000, value=1, step=1, key="pred_user")
    
    with col2:
        movie_id = st.number_input("ID Film", min_value=1, max_value=200000, value=1, step=1)
    
    with col3:
        available_models = get_available_models()
        if available_models:
            model_type = st.selectbox("Type de Mod√®le", available_models, key="pred_model")
        else:
            st.error("Aucun mod√®le disponible")
            return
    
    # Informations sur le film
    if st.button("Voir les informations du film"):
        movie_info = get_movie_info(movie_id)
        if movie_info:
            st.info(f"**{movie_info['title']}** | Genres: {', '.join(movie_info['genres'])} | Ann√©e: {movie_info.get('year', 'N/A')}")
        else:
            st.warning("Film non trouv√©")
    
    # Bouton pour pr√©dire
    if st.button("Pr√©dire la Note", type="primary"):
        with st.spinner("Pr√©diction en cours..."):
            prediction = predict_rating(user_id, movie_id, model_type)
        
        if prediction:
            st.success(f"Pr√©diction g√©n√©r√©e en {prediction['execution_time_ms']:.1f}ms")
            
            # Affichage de la pr√©diction
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Note Pr√©dite", f"{prediction['predicted_rating']:.2f}/5.0")
            
            with col2:
                # Barre de progression pour visualiser la note
                progress = prediction['predicted_rating'] / 5.0
                st.progress(progress)
            
            with col3:
                # Interpr√©tation de la note
                rating = prediction['predicted_rating']
                if rating >= 4.0:
                    interpretation = "üòç Excellent"
                elif rating >= 3.5:
                    interpretation = "üòä Tr√®s bien"
                elif rating >= 3.0:
                    interpretation = "üôÇ Bien"
                elif rating >= 2.5:
                    interpretation = "üòê Moyen"
                else:
                    interpretation = "üòû D√©cevant"
                
                st.write(f"**{interpretation}**")
            
            st.info(f"Mod√®le utilis√©: {prediction['model_used']} | G√©n√©r√© le: {prediction['timestamp']}")

def show_add_rating_page():
    """Page pour ajouter un rating"""
    st.header("‚≠ê Ajouter une √âvaluation")
    
    # Formulaire d'ajout de rating
    with st.form("add_rating_form"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            user_id = st.number_input("ID Utilisateur", min_value=1, max_value=100000, value=1, step=1, key="rating_user")
        
        with col2:
            movie_id = st.number_input("ID Film", min_value=1, max_value=200000, value=1, step=1, key="rating_movie")
        
        with col3:
            rating = st.slider("Note", min_value=0.5, max_value=5.0, value=3.0, step=0.5)
        
        # Informations sur le film
        movie_info = None
        if movie_id:
            movie_info = get_movie_info(movie_id)
            if movie_info:
                st.info(f"Film s√©lectionn√©: **{movie_info['title']}** | Genres: {', '.join(movie_info['genres'])}")
        
        submitted = st.form_submit_button("Ajouter l'√âvaluation", type="primary")
        
        if submitted:
            if movie_info is None:
                st.error("Film non trouv√©. Veuillez v√©rifier l'ID du film.")
            else:
                with st.spinner("Ajout de l'√©valuation..."):
                    result = add_rating(user_id, movie_id, rating)
                
                if result:
                    st.success(f"‚úÖ √âvaluation ajout√©e avec succ√®s! Note: {rating}/5.0 pour '{movie_info['title']}'")
                    
                    # Suggestion de recommandations
                    if st.button("Voir mes nouvelles recommandations"):
                        st.experimental_rerun()

def show_user_profile_page():
    """Page du profil utilisateur"""
    st.header("üë§ Profil Utilisateur")
    
    user_id = st.number_input("ID Utilisateur", min_value=1, max_value=100000, value=1, step=1, key="profile_user")
    
    if st.button("Charger le Profil"):
        with st.spinner("Chargement du profil..."):
            profile = get_user_profile(user_id)
        
        if profile:
            st.subheader(f"Profil de l'utilisateur {user_id}")
            
            # M√©triques du profil
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Note Moyenne", f"{profile['average_rating']:.2f}/5.0")
            
            with col2:
                st.metric("Total d'√âvaluations", profile['total_ratings'])
            
            with col3:
                st.metric("Films Uniques √âvalu√©s", profile['unique_movies_rated'])
            
            # Graphique de la distribution des notes (simul√©)
            st.subheader("Analyse du Profil")
            
            # Simulation de donn√©es pour la d√©monstration
            rating_distribution = {
                '0.5-1.0': np.random.randint(0, 10),
                '1.5-2.0': np.random.randint(0, 15),
                '2.5-3.0': np.random.randint(5, 25),
                '3.5-4.0': np.random.randint(10, 30),
                '4.5-5.0': np.random.randint(5, 20)
            }
            
            fig = px.bar(
                x=list(rating_distribution.keys()),
                y=list(rating_distribution.values()),
                title="Distribution des Notes",
                labels={'x': 'Plage de Notes', 'y': 'Nombre de Films'}
            )
            st.plotly_chart(fig, use_container_width=True)
            
        else:
            st.warning("Utilisateur non trouv√© ou aucune donn√©e disponible.")

def show_metrics_page():
    """Page des m√©triques"""
    st.header("üìä M√©triques de Performance")
    
    # Bouton de rafra√Æchissement
    if st.button("üîÑ Actualiser les M√©triques"):
        st.cache_data.clear()
    
    metrics = get_metrics()
    
    if metrics:
        # M√©triques syst√®me
        if 'system_metrics' in metrics and metrics['system_metrics'].get('enabled'):
            st.subheader("M√©triques Syst√®me")
            
            col1, col2, col3, col4 = st.columns(4)
            
            sys_metrics = metrics['system_metrics']
            
            with col1:
                cpu = sys_metrics.get('cpu_percent', 0)
                st.metric("CPU", f"{cpu:.1f}%", delta=None)
            
            with col2:
                memory = sys_metrics.get('memory_percent', 0)
                st.metric("M√©moire", f"{memory:.1f}%", delta=None)
            
            with col3:
                disk = sys_metrics.get('disk_percent', 0)
                st.metric("Disque", f"{disk:.1f}%", delta=None)
            
            with col4:
                processes = sys_metrics.get('process_count', 0)
                st.metric("Processus", processes)
        
        # Statistiques des requ√™tes
        if 'request_stats' in metrics:
            st.subheader("Statistiques des Requ√™tes (Derni√®re Heure)")
            
            request_stats = metrics['request_stats'].get('last_hour', {})
            
            if request_stats:
                # Tableau des statistiques par endpoint
                stats_data = []
                for endpoint, stats in request_stats.items():
                    stats_data.append({
                        'Endpoint': endpoint,
                        'Requ√™tes': stats['request_count'],
                        'Temps Moyen (ms)': f"{stats['avg_duration_ms']:.1f}",
                        'P95 (ms)': f"{stats['p95_duration_ms']:.1f}",
                        'Max (ms)': f"{stats['max_duration_ms']:.1f}"
                    })
                
                if stats_data:
                    df_stats = pd.DataFrame(stats_data)
                    st.dataframe(df_stats, use_container_width=True)
                    
                    # Graphique des temps de r√©ponse
                    fig = px.bar(
                        df_stats,
                        x='Endpoint',
                        y='Temps Moyen (ms)',
                        title="Temps de R√©ponse Moyen par Endpoint"
                    )
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Aucune requ√™te dans la derni√®re heure")
        
        # Performances des mod√®les
        if 'model_performance' in metrics and metrics['model_performance']:
            st.subheader("Performances des Mod√®les")
            
            model_perf = metrics['model_performance']
            
            for model_name, perf_metrics in model_perf.items():
                st.write(f"**{model_name}**")
                
                if perf_metrics:
                    cols = st.columns(len(perf_metrics))
                    for i, (metric_name, value) in enumerate(perf_metrics.items()):
                        with cols[i % len(cols)]:
                            st.metric(metric_name.upper(), f"{value:.3f}")
                else:
                    st.write("Aucune m√©trique disponible")
                
                st.markdown("---")
        
        # Informations de collecte
        if 'collection_info' in metrics:
            st.subheader("Informations de Collecte")
            
            col1, col2, col3 = st.columns(3)
            
            info = metrics['collection_info']
            
            with col1:
                st.metric("Points de M√©triques", info.get('total_metric_points', 0))
            
            with col2:
                st.metric("Requ√™tes Enregistr√©es", info.get('total_request_records', 0))
            
            with col3:
                st.metric("R√©tention (heures)", info.get('retention_hours', 0))
    
    else:
        st.warning("M√©triques non disponibles")

def show_about_page():
    """Page √† propos"""
    st.header("‚ÑπÔ∏è √Ä Propos du Syst√®me")
    
    st.markdown("""
    ## Syst√®me de Recommandation de Films
    
    Ce syst√®me utilise des techniques avanc√©es d'apprentissage automatique pour fournir des recommandations de films personnalis√©es.
    
    ### üéØ Fonctionnalit√©s
    
    - **Filtrage Collaboratif**: Recommandations bas√©es sur les pr√©f√©rences d'utilisateurs similaires
    - **Filtrage par Contenu**: Recommandations bas√©es sur les caract√©ristiques des films
    - **Syst√®me Hybride**: Combinaison des deux approches pour de meilleurs r√©sultats
    - **Pr√©dictions en Temps R√©el**: Estimation des notes que vous donneriez aux films
    - **Interface Intuitive**: Interface web facile √† utiliser
    
    ### üõ†Ô∏è Technologies Utilis√©es
    
    - **Backend**: FastAPI, Python
    - **Machine Learning**: Scikit-learn, Surprise
    - **Frontend**: Streamlit
    - **Base de Donn√©es**: SQLite
    - **Monitoring**: M√©triques en temps r√©el
    
    ### üìä Dataset
    
    Le syst√®me est entra√Æn√© sur le dataset MovieLens 20M qui contient:
    - 20 millions de ratings
    - 27,000 films
    - 138,000 utilisateurs
    
    ### üë®‚Äçüíª D√©veloppeur
    
    **Dady Akrou Cyrille**  
    Data Scientist  
    Email: cyrilledady0501@gmail.com
    
    ### üìù Version
    
    Version 1.0.0 - D√©cembre 2024
    """)
    
    # Configuration syst√®me
    config = load_config()
    if config:
        st.subheader("Configuration Syst√®me")
        
        with st.expander("Voir la configuration"):
            st.json(config)

if __name__ == "__main__":
    main()