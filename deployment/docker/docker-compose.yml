# Docker Compose pour le système de recommandation de films
# Auteur: Dady Akrou Cyrille
# Email: cyrilledady0501@gmail.com

version: '3.8'

services:
  # API FastAPI
  recommendation-api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    container_name: movie-recommendation-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - CONFIG_PATH=/app/config/config.yaml
      - LOG_LEVEL=INFO
      - DATABASE_URL=sqlite:///app/data/recommendations.db
    volumes:
      - ../../data:/app/data
      - ../../logs:/app/logs
      - ../../models:/app/models
    networks:
      - recommendation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # Interface Streamlit
  streamlit-ui:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.streamlit
    container_name: movie-recommendation-ui
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://recommendation-api:8000
    volumes:
      - ../../config:/app/config
    networks:
      - recommendation-network
    restart: unless-stopped
    depends_on:
      - recommendation-api

  # Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: movie-recommendation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - recommendation-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Prometheus pour le monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: movie-recommendation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - recommendation-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana pour la visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: movie-recommendation-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - recommendation-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # MLflow pour le tracking des modèles
  mlflow:
    image: python:3.9-slim
    container_name: movie-recommendation-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///app/mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/app/mlflow/artifacts
    volumes:
      - ../../mlflow:/app/mlflow
    networks:
      - recommendation-network
    restart: unless-stopped
    command: >
      bash -c "pip install mlflow && 
               mlflow server 
               --backend-store-uri sqlite:///app/mlflow/mlflow.db 
               --default-artifact-root /app/mlflow/artifacts 
               --host 0.0.0.0 
               --port 5000"

  # Nginx comme reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: movie-recommendation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - recommendation-network
    restart: unless-stopped
    depends_on:
      - recommendation-api
      - streamlit-ui
    profiles:
      - production

networks:
  recommendation-network:
    driver: bridge
    name: movie-recommendation-network

volumes:
  redis-data:
    name: movie-recommendation-redis-data
  prometheus-data:
    name: movie-recommendation-prometheus-data
  grafana-data:
    name: movie-recommendation-grafana-data

# Commandes utiles:
# docker-compose up -d                    # Démarrer tous les services
# docker-compose up -d --profile production  # Démarrer avec Nginx
# docker-compose down                     # Arrêter tous les services
# docker-compose logs -f recommendation-api  # Voir les logs de l'API
# docker-compose exec recommendation-api bash  # Accéder au conteneur API
# docker-compose ps                       # Voir l'état des services
# docker-compose pull                     # Mettre à jour les images