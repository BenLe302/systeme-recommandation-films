# ConfigMap pour la configuration du système de recommandation
# Auteur: Dady Akrou Cyrille
# Email: cyrilledady0501@gmail.com

apiVersion: v1
kind: ConfigMap
metadata:
  name: recommendation-config
  namespace: movie-recommendation
  labels:
    app: movie-recommendation
    component: config
data:
  config.yaml: |
    # Configuration pour l'environnement Kubernetes
    project:
      name: "Movie Recommendation System"
      version: "1.0.0"
      author: "Dady Akrou Cyrille"
      email: "cyrilledady0501@gmail.com"
      description: "Système de recommandation de films utilisant des techniques d'apprentissage automatique"
    
    # Chemins des données (adaptés pour Kubernetes)
    data:
      base_path: "/app/data"
      raw_data_path: "/app/data/raw"
      processed_data_path: "/app/data/processed"
      models_path: "/app/models"
      
      # Fichiers du dataset MovieLens
      dataset_files:
        ratings: "rating.csv"
        movies: "movie.csv"
        tags: "tag.csv"
        links: "link.csv"
        genome_scores: "genome_scores.csv"
        genome_tags: "genome_tags.csv"
    
    # Paramètres de préprocessing
    preprocessing:
      data_split:
        train_ratio: 0.7
        validation_ratio: 0.15
        test_ratio: 0.15
        random_state: 42
        stratify_by_user: true
        temporal_split: true
      
      filtering:
        min_user_ratings: 20
        min_movie_ratings: 10
        max_user_ratings: 10000
      
      normalization:
        rating_scale: [0.5, 5.0]
        normalize_features: true
        feature_scaling_method: "standard"
    
    # Paramètres des modèles de recommandation
    models:
      collaborative_filtering:
        svd:
          n_factors: 100
          n_epochs: 20
          lr_all: 0.005
          reg_all: 0.02
          random_state: 42
        
        nmf:
          n_factors: 50
          n_epochs: 50
          reg_pu: 0.06
          reg_qi: 0.06
          random_state: 42
        
        knn:
          k: 40
          sim_options:
            name: "cosine"
            user_based: false
          min_support: 5
      
      content_based:
        tfidf:
          max_features: 5000
          ngram_range: [1, 2]
          stop_words: "english"
          min_df: 2
          max_df: 0.95
        
        similarity:
          metric: "cosine"
          top_k: 100
      
      hybrid:
        weighted:
          collaborative_weight: 0.7
          content_weight: 0.3
          optimize_weights: true
        
        switching:
          min_ratings_threshold: 10
          confidence_threshold: 0.8
    
    # Métriques d'évaluation
    evaluation:
      metrics:
        - "rmse"
        - "mae"
        - "precision_at_k"
        - "recall_at_k"
        - "f1_at_k"
        - "ndcg_at_k"
        - "hit_rate_at_k"
        - "coverage"
        - "diversity"
      
      k_values: [5, 10, 20]
      cross_validation:
        n_folds: 5
        random_state: 42
    
    # Configuration de l'API
    api:
      host: "0.0.0.0"
      port: 8000
      debug: false
      reload: false
      workers: 4
      
      cors:
        allow_origins: ["*"]
        allow_methods: ["GET", "POST", "PUT", "DELETE"]
        allow_headers: ["*"]
      
      rate_limiting:
        enabled: true
        requests_per_minute: 100
        burst_size: 20
      
      caching:
        enabled: true
        ttl_seconds: 300
        max_size: 1000
    
    # Configuration Streamlit
    streamlit:
      host: "0.0.0.0"
      port: 8501
      theme:
        primary_color: "#1f77b4"
        background_color: "#ffffff"
        secondary_background_color: "#f0f2f6"
        text_color: "#262730"
    
    # Configuration de la base de données
    database:
      type: "sqlite"
      path: "/app/data/recommendations.db"
      pool_size: 10
      max_overflow: 20
      pool_timeout: 30
      pool_recycle: 3600
    
    # Configuration Redis
    redis:
      host: "redis-service"
      port: 6379
      db: 0
      password: null
      socket_timeout: 5
      socket_connect_timeout: 5
      retry_on_timeout: true
      max_connections: 50
    
    # Configuration des logs
    logging:
      level: "INFO"
      format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
      file_path: "/app/logs/recommendation_system.log"
      max_file_size: "10MB"
      backup_count: 5
      console_output: true
    
    # Configuration MLOps
    mlflow:
      tracking_uri: "http://mlflow-service:5000"
      experiment_name: "movie_recommendation"
      artifact_location: "/app/mlflow/artifacts"
      
    # Configuration de déploiement
    deployment:
      environment: "kubernetes"
      
      docker:
        image_name: "movie-recommendation"
        tag: "latest"
        registry: "localhost:5000"
      
      kubernetes:
        namespace: "movie-recommendation"
        replicas: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      
      monitoring:
        prometheus:
          enabled: true
          port: 9090
        
        grafana:
          enabled: true
          port: 3000
          admin_password: "admin123"
    
    # Configuration de sécurité
    security:
      secret_key: "your-secret-key-change-in-production"
      algorithm: "HS256"
      access_token_expire_minutes: 30
      
      rate_limiting:
        enabled: true
        requests_per_minute: 100
      
      cors:
        allow_origins: ["*"]
        allow_credentials: true
    
    # Variables d'environnement
    environment:
      development:
        debug: true
        log_level: "DEBUG"
        reload: true
      
      production:
        debug: false
        log_level: "INFO"
        reload: false
        workers: 4
      
      kubernetes:
        debug: false
        log_level: "INFO"
        reload: false
        workers: 4
        use_redis: true
        enable_monitoring: true